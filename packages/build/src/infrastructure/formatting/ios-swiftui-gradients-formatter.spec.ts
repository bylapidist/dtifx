import type { JsonPointer } from '@lapidist/dtif-parser';
import { describe, expect, it } from 'vitest';

import type { BuildConfig } from '../../config/index.js';
import type { BuildTokenSnapshot } from '../../domain/models/tokens.js';
import type { FormatterToken } from '../../formatter/formatter-registry.js';
import { createIosSwiftUiGradientsFormatterFactory } from './ios-swiftui-gradients-formatter.js';

function createToken(
  pointer: JsonPointer,
  transforms: ReadonlyMap<string, unknown>,
  value: unknown = undefined,
): FormatterToken {
  const snapshot = {
    pointer,
    token: { type: 'gradient', value },
  } as unknown as BuildTokenSnapshot;
  return {
    snapshot,
    pointer,
    type: 'gradient',
    value,
    transforms,
  } satisfies FormatterToken;
}

describe('createIosSwiftUiGradientsFormatterFactory', () => {
  it('emits SwiftUI gradient artifacts for supported tokens', async () => {
    const factory = createIosSwiftUiGradientsFormatterFactory();
    const entry = { name: 'ios.swiftui.gradients', output: {} } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken('/gradient/background/ignored' as JsonPointer, new Map()),
      createToken(
        '/gradient/background/secondary' as JsonPointer,
        new Map([
          [
            'gradient.toSwiftUI',
            {
              kind: 'radial',
              stops: [
                {
                  color: '#333333',
                },
              ],
            },
          ],
        ]),
      ),
      createToken(
        '/gradient/background/primary' as JsonPointer,
        new Map([
          [
            'gradient.toSwiftUI',
            {
              kind: 'linear',
              angle: 45,
              stops: [
                {
                  color: '#111111',
                },
                {
                  color: '#222222',
                  location: 0.5,
                  easing: 'easeInOut',
                },
              ],
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });

    const expectedContents = [
      '// Generated by @dtifx/build. Do not edit.',
      '',
      'import SwiftUI',
      '',
      'public struct GradientTokens {',
      '  public enum GradientKind: String {',
      '    case linear',
      '    case radial',
      '  }',
      '',
      '  public struct GradientStop {',
      '    public let color: String',
      '    public let location: Double?',
      '    public let easing: String?',
      '',
      '    public init(color: String, location: Double? = nil, easing: String? = nil) {',
      '      self.color = color',
      '      self.location = location',
      '      self.easing = easing',
      '    }',
      '  }',
      '',
      '  public struct GradientToken {',
      '    public let kind: GradientKind',
      '    public let angle: Double?',
      '    public let stops: [GradientStop]',
      '',
      '    public init(kind: GradientKind, angle: Double? = nil, stops: [GradientStop]) {',
      '      self.kind = kind',
      '      self.angle = angle',
      '      self.stops = stops',
      '    }',
      '  }',
      '',
      '  /// Token: /gradient/background/primary',
      '  public static let gradientBackgroundPrimary = GradientToken(',
      '    kind: .linear,',
      '    angle: 45,',
      '    stops: [',
      '      GradientStop(color: "#111111"),',
      '      GradientStop(',
      '        color: "#222222",',
      '        location: 0.5,',
      '        easing: "easeInOut"',
      '      ),',
      '    ]',
      '  )',
      '',
      '  /// Token: /gradient/background/secondary',
      '  public static let gradientBackgroundSecondary = GradientToken(',
      '    kind: .radial,',
      '    stops: [',
      '      GradientStop(color: "#333333"),',
      '    ]',
      '  )',
      '}',
      '',
    ].join('\n');

    expect(artifacts).toStrictEqual([
      {
        path: 'GradientTokens.swift',
        contents: expectedContents,
        encoding: 'utf8',
        metadata: { gradientCount: 2 },
      },
    ]);
  });

  it('ensures identifiers remain unique when collisions occur', async () => {
    const factory = createIosSwiftUiGradientsFormatterFactory();
    const entry = { name: 'ios.swiftui.gradients', output: {} } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken(
        '/gradient/Background/Primary' as JsonPointer,
        new Map([
          [
            'gradient.toSwiftUI',
            {
              kind: 'linear',
              stops: [
                {
                  color: '#111111',
                },
              ],
            },
          ],
        ]),
      ),
      createToken(
        '/gradient/background/primary' as JsonPointer,
        new Map([
          [
            'gradient.toSwiftUI',
            {
              kind: 'linear',
              stops: [
                {
                  color: '#222222',
                },
              ],
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });

    expect(artifacts[0]?.contents).toContain(
      'public static let gradientBackgroundPrimary = GradientToken(',
    );
    expect(artifacts[0]?.contents).toContain(
      'public static let gradientBackgroundPrimary2 = GradientToken(',
    );
  });

  it('allows overriding output file metadata', async () => {
    const factory = createIosSwiftUiGradientsFormatterFactory();
    const entry = {
      name: 'ios.swiftui.gradients',
      output: {},
      options: {
        filename: 'CustomGradients.swift',
        structName: 'CustomGradientTokens',
        accessModifier: 'internal',
        imports: ['SwiftUI', 'Combine'],
      },
    } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken(
        '/gradient/background/primary' as JsonPointer,
        new Map([
          [
            'gradient.toSwiftUI',
            {
              kind: 'linear',
              stops: [
                {
                  color: '#111111',
                },
              ],
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });

    expect(artifacts).toStrictEqual([
      {
        path: 'CustomGradients.swift',
        contents: expect.stringContaining('internal struct CustomGradientTokens {'),
        encoding: 'utf8',
        metadata: { gradientCount: 1 },
      },
    ]);
    expect(artifacts[0]?.contents).toContain('import SwiftUI');
    expect(artifacts[0]?.contents).toContain('import Combine');
  });

  it('returns no artifacts when no tokens contain supported transforms', async () => {
    const factory = createIosSwiftUiGradientsFormatterFactory();
    const entry = { name: 'ios.swiftui.gradients', output: {} } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken('/gradient/background/primary' as JsonPointer, new Map()),
    ];

    const artifacts = await definition.run({ tokens });

    expect(artifacts).toStrictEqual([]);
  });

  it('throws when provided invalid option values', () => {
    const factory = createIosSwiftUiGradientsFormatterFactory();

    expect(() =>
      factory.create(
        {
          name: 'ios.swiftui.gradients',
          output: {},
          options: {
            accessModifier: 'private',
          },
        },
        { config: {} as BuildConfig },
      ),
    ).toThrow(
      'Formatter "ios.swiftui.gradients" received invalid access modifier "private". Expected "public" or "internal".',
    );
  });
});
