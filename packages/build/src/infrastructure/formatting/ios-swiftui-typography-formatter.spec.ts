import type { JsonPointer } from '@lapidist/dtif-parser';
import { describe, expect, it } from 'vitest';

import type { BuildConfig } from '../../config/index.js';
import type { BuildTokenSnapshot } from '../../domain/models/tokens.js';
import type { FormatterToken } from '../../formatter/formatter-registry.js';
import { createIosSwiftUiTypographyFormatterFactory } from './ios-swiftui-typography-formatter.js';

function createToken(
  pointer: JsonPointer,
  transforms: ReadonlyMap<string, unknown>,
  value: unknown = undefined,
): FormatterToken {
  const snapshot = {
    pointer,
    token: { type: 'typography', value },
  } as unknown as BuildTokenSnapshot;
  return {
    snapshot,
    pointer,
    type: 'typography',
    value,
    transforms,
  } satisfies FormatterToken;
}

describe('createIosSwiftUiTypographyFormatterFactory', () => {
  it('emits SwiftUI typography artifacts for supported tokens', async () => {
    const factory = createIosSwiftUiTypographyFormatterFactory();
    const entry = { name: 'ios.swiftui.typography', output: {} } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken('/typography/body/base' as JsonPointer, new Map()),
      createToken(
        '/typography/body/large' as JsonPointer,
        new Map([
          [
            'typography.toSwiftUI',
            {
              fontFamily: '"Inter" Display',
              fontWeight: '700',
              fontSize: {
                points: 18,
                literal: '18.0',
              },
              lineHeight: {
                points: 24,
                multiplier: 1.25,
                literal: '24.0',
              },
              letterSpacing: {
                points: 0.5,
                literal: '0.5',
              },
              paragraphSpacing: {
                points: 8,
                literal: '8.0',
              },
              textCase: 'uppercase',
              textTransform: 'capitalize',
            },
          ],
        ]),
      ),
      createToken(
        '/typography/body/small' as JsonPointer,
        new Map([
          [
            'typography.toSwiftUI',
            {
              fontSize: {
                points: 14,
                literal: '14.0',
              },
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });

    const expectedContents = [
      '// Generated by @dtifx/build. Do not edit.',
      '',
      'import SwiftUI',
      '',
      'public struct TypographyTokens {',
      '  public struct TypographyDimension {',
      '    public let points: CGFloat',
      '    public let literal: String',
      '',
      '    public init(points: CGFloat, literal: String) {',
      '      self.points = points',
      '      self.literal = literal',
      '    }',
      '  }',
      '',
      '  public struct TypographyLineHeight {',
      '    public let literal: String',
      '    public let points: CGFloat?',
      '    public let multiplier: Double?',
      '',
      '    public init(literal: String, points: CGFloat? = nil, multiplier: Double? = nil) {',
      '      self.literal = literal',
      '      self.points = points',
      '      self.multiplier = multiplier',
      '    }',
      '  }',
      '',
      '  public struct TypographyStyle {',
      '    public let fontFamily: String?',
      '    public let fontWeight: String?',
      '    public let fontSize: TypographyDimension?',
      '    public let lineHeight: TypographyLineHeight?',
      '    public let letterSpacing: TypographyDimension?',
      '    public let paragraphSpacing: TypographyDimension?',
      '    public let textCase: String?',
      '    public let textTransform: String?',
      '',
      '    public init(',
      '      fontFamily: String? = nil,',
      '      fontWeight: String? = nil,',
      '      fontSize: TypographyDimension? = nil,',
      '      lineHeight: TypographyLineHeight? = nil,',
      '      letterSpacing: TypographyDimension? = nil,',
      '      paragraphSpacing: TypographyDimension? = nil,',
      '      textCase: String? = nil,',
      '      textTransform: String? = nil',
      '    ) {',
      '      self.fontFamily = fontFamily',
      '      self.fontWeight = fontWeight',
      '      self.fontSize = fontSize',
      '      self.lineHeight = lineHeight',
      '      self.letterSpacing = letterSpacing',
      '      self.paragraphSpacing = paragraphSpacing',
      '      self.textCase = textCase',
      '      self.textTransform = textTransform',
      '    }',
      '  }',
      '',
      '  /// Token: /typography/body/large',
      '  public static let typographyBodyLarge = TypographyStyle(',
      String.raw`    fontFamily: "\"Inter\" Display",`,
      '    fontWeight: "700",',
      '    fontSize: TypographyDimension(points: 18.0, literal: "18.0"),',
      '    lineHeight: TypographyLineHeight(literal: "24.0", points: 24, multiplier: 1.25),',
      '    letterSpacing: TypographyDimension(points: 0.5, literal: "0.5"),',
      '    paragraphSpacing: TypographyDimension(points: 8.0, literal: "8.0"),',
      '    textCase: "uppercase",',
      '    textTransform: "capitalize"',
      '  )',
      '',
      '  /// Token: /typography/body/small',
      '  public static let typographyBodySmall = TypographyStyle(',
      '    fontSize: TypographyDimension(points: 14.0, literal: "14.0")',
      '  )',
      '}',
      '',
    ].join('\n');

    expect(artifacts).toStrictEqual([
      {
        path: 'TypographyTokens.swift',
        contents: expectedContents,
        encoding: 'utf8',
        metadata: { typographyCount: 2 },
      },
    ]);
  });

  it('ensures identifiers remain unique when collisions occur', async () => {
    const factory = createIosSwiftUiTypographyFormatterFactory();
    const entry = { name: 'ios.swiftui.typography', output: {} } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken(
        '/typography/Heading/Large' as JsonPointer,
        new Map([
          [
            'typography.toSwiftUI',
            {
              fontFamily: 'Display',
            },
          ],
        ]),
      ),
      createToken(
        '/typography/heading/large' as JsonPointer,
        new Map([
          [
            'typography.toSwiftUI',
            {
              fontFamily: 'Text',
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });
    const contents = artifacts[0]?.contents ?? '';

    expect(contents).toContain('public static let typographyHeadingLarge = TypographyStyle(');
    expect(contents).toContain('public static let typographyHeadingLarge2 = TypographyStyle(');
  });

  it('allows formatter options to customise output', async () => {
    const factory = createIosSwiftUiTypographyFormatterFactory();
    const entry = {
      name: 'ios.swiftui.typography',
      output: {},
      options: {
        filename: 'Sources/Tokens/Typography.swift',
        structName: 'TypographyLibrary',
        accessModifier: 'internal',
        imports: ['SwiftUI', 'Foundation'],
      },
    } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken(
        '/typography/heading/h1' as JsonPointer,
        new Map([
          [
            'typography.toSwiftUI',
            {
              fontWeight: '600',
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });

    expect(artifacts).toStrictEqual([
      {
        path: 'Sources/Tokens/Typography.swift',
        contents: [
          '// Generated by @dtifx/build. Do not edit.',
          '',
          'import SwiftUI',
          'import Foundation',
          '',
          'internal struct TypographyLibrary {',
          '  internal struct TypographyDimension {',
          '    internal let points: CGFloat',
          '    internal let literal: String',
          '',
          '    internal init(points: CGFloat, literal: String) {',
          '      self.points = points',
          '      self.literal = literal',
          '    }',
          '  }',
          '',
          '  internal struct TypographyLineHeight {',
          '    internal let literal: String',
          '    internal let points: CGFloat?',
          '    internal let multiplier: Double?',
          '',
          '    internal init(literal: String, points: CGFloat? = nil, multiplier: Double? = nil) {',
          '      self.literal = literal',
          '      self.points = points',
          '      self.multiplier = multiplier',
          '    }',
          '  }',
          '',
          '  internal struct TypographyStyle {',
          '    internal let fontFamily: String?',
          '    internal let fontWeight: String?',
          '    internal let fontSize: TypographyDimension?',
          '    internal let lineHeight: TypographyLineHeight?',
          '    internal let letterSpacing: TypographyDimension?',
          '    internal let paragraphSpacing: TypographyDimension?',
          '    internal let textCase: String?',
          '    internal let textTransform: String?',
          '',
          '    internal init(',
          '      fontFamily: String? = nil,',
          '      fontWeight: String? = nil,',
          '      fontSize: TypographyDimension? = nil,',
          '      lineHeight: TypographyLineHeight? = nil,',
          '      letterSpacing: TypographyDimension? = nil,',
          '      paragraphSpacing: TypographyDimension? = nil,',
          '      textCase: String? = nil,',
          '      textTransform: String? = nil',
          '    ) {',
          '      self.fontFamily = fontFamily',
          '      self.fontWeight = fontWeight',
          '      self.fontSize = fontSize',
          '      self.lineHeight = lineHeight',
          '      self.letterSpacing = letterSpacing',
          '      self.paragraphSpacing = paragraphSpacing',
          '      self.textCase = textCase',
          '      self.textTransform = textTransform',
          '    }',
          '  }',
          '',
          '  /// Token: /typography/heading/h1',
          '  internal static let typographyHeadingH1 = TypographyStyle(',
          '    fontWeight: "600"',
          '  )',
          '}',
          '',
        ].join('\n'),
        encoding: 'utf8',
        metadata: { typographyCount: 1 },
      },
    ]);
  });

  it('returns no artifacts when no supported tokens are provided', async () => {
    const factory = createIosSwiftUiTypographyFormatterFactory();
    const entry = { name: 'ios.swiftui.typography', output: {} } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const artifacts = await definition.run({ tokens: [] });

    expect(artifacts).toStrictEqual([]);
  });
});
