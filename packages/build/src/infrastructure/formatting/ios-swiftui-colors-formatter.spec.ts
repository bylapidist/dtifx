import type { JsonPointer } from '@lapidist/dtif-parser';
import { describe, expect, it } from 'vitest';

import type { BuildConfig } from '../../config/index.js';
import type { BuildTokenSnapshot } from '../../domain/models/tokens.js';
import type { FormatterToken } from '../../formatter/formatter-registry.js';
import { createIosSwiftUiColorsFormatterFactory } from './ios-swiftui-colors-formatter.js';

function createToken(
  pointer: JsonPointer,
  transforms: ReadonlyMap<string, unknown>,
  value: unknown = undefined,
): FormatterToken {
  const snapshot = {
    pointer,
    token: { type: 'color', value },
  } as unknown as BuildTokenSnapshot;
  return {
    snapshot,
    pointer,
    type: 'color',
    value,
    transforms,
  } satisfies FormatterToken;
}

describe('createIosSwiftUiColorsFormatterFactory', () => {
  it('emits SwiftUI color artifacts for supported tokens', async () => {
    const factory = createIosSwiftUiColorsFormatterFactory();
    const entry = { name: 'ios.swiftui.colors', output: {} };
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken('/color/background/base' as JsonPointer, new Map()),
      createToken(
        '/color/background/overlay' as JsonPointer,
        new Map([
          [
            'color.toSwiftUIColor',
            {
              red: 0,
              green: 0,
              blue: 0,
              opacity: 0.5,
              hex: '#000000',
            },
          ],
        ]),
      ),
      createToken(
        '/color/primary/default' as JsonPointer,
        new Map([
          [
            'color.toSwiftUIColor',
            {
              red: 0.25,
              green: 0.5,
              blue: 0.75,
              opacity: 1,
              hex: '#4080bf',
            },
          ],
        ]),
      ),
      createToken(
        '/color/primary/disabled' as JsonPointer,
        new Map([
          [
            'color.toSwiftUIColor',
            {
              red: 1,
              green: 1,
              blue: 1,
              opacity: 0.25,
              hex: '#ffffff',
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });

    const expectedContents = [
      '// Generated by @dtifx/build. Do not edit.',
      '',
      'import SwiftUI',
      '',
      'public struct ColorTokens {',
      '  /// Token: /color/background/overlay',
      '  /// Hex: #000000',
      '  public static let colorBackgroundOverlay = Color(red: 0, green: 0, blue: 0, opacity: 0.5)',
      '',
      '  /// Token: /color/primary/default',
      '  /// Hex: #4080bf',
      '  public static let colorPrimaryDefault = Color(red: 0.25, green: 0.5, blue: 0.75, opacity: 1)',
      '',
      '  /// Token: /color/primary/disabled',
      '  /// Hex: #ffffff',
      '  public static let colorPrimaryDisabled = Color(red: 1, green: 1, blue: 1, opacity: 0.25)',
      '}',
      '',
    ].join('\n');

    expect(artifacts).toStrictEqual([
      {
        path: 'ColorTokens.swift',
        contents: expectedContents,
        encoding: 'utf8',
        metadata: { colorCount: 3 },
      },
    ]);
  });

  it('ensures identifiers remain unique when collisions occur', async () => {
    const factory = createIosSwiftUiColorsFormatterFactory();
    const entry = { name: 'ios.swiftui.colors', output: {} };
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken(
        '/color/Primary' as JsonPointer,
        new Map([
          [
            'color.toSwiftUIColor',
            {
              red: 0,
              green: 0,
              blue: 0,
              opacity: 1,
              hex: '#000000',
            },
          ],
        ]),
      ),
      createToken(
        '/color/primary' as JsonPointer,
        new Map([
          [
            'color.toSwiftUIColor',
            {
              red: 1,
              green: 1,
              blue: 1,
              opacity: 1,
              hex: '#ffffff',
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });

    expect(artifacts[0]?.contents).toContain(
      'public static let colorPrimary = Color(red: 1, green: 1, blue: 1, opacity: 1)',
    );
    expect(artifacts[0]?.contents).toContain(
      'public static let colorPrimary2 = Color(red: 0, green: 0, blue: 0, opacity: 1)',
    );
  });

  it('allows formatter options to customise output', async () => {
    const factory = createIosSwiftUiColorsFormatterFactory();
    const entry = {
      name: 'ios.swiftui.colors',
      output: {},
      options: {
        filename: 'Sources/Tokens/BrandColors.swift',
        structName: 'BrandColors',
        accessModifier: 'internal',
        imports: ['SwiftUI', 'UIKit'],
      },
    } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken(
        '/color/brand/primary' as JsonPointer,
        new Map([
          [
            'color.toSwiftUIColor',
            {
              red: 0.1,
              green: 0.2,
              blue: 0.3,
              opacity: 0.9,
              hex: '#1a334d',
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });

    const expectedCustomContents = [
      '// Generated by @dtifx/build. Do not edit.',
      '',
      'import SwiftUI',
      'import UIKit',
      '',
      'internal struct BrandColors {',
      '  /// Token: /color/brand/primary',
      '  /// Hex: #1a334d',
      '  internal static let colorBrandPrimary = Color(red: 0.1, green: 0.2, blue: 0.3, opacity: 0.9)',
      '}',
      '',
    ].join('\n');

    expect(artifacts).toStrictEqual([
      {
        path: 'Sources/Tokens/BrandColors.swift',
        contents: expectedCustomContents,
        encoding: 'utf8',
        metadata: { colorCount: 1 },
      },
    ]);
  });

  it('validates formatter options', () => {
    const factory = createIosSwiftUiColorsFormatterFactory();

    expect(() =>
      factory.create(
        {
          name: 'ios.swiftui.colors',
          output: {},
          options: { filename: '' },
        },
        { config: {} as BuildConfig },
      ),
    ).toThrow('Formatter "ios.swiftui.colors" filename must be a non-empty string.');

    expect(() =>
      factory.create(
        {
          name: 'ios.swiftui.colors',
          output: {},
          options: { structName: '123Colors' },
        },
        { config: {} as BuildConfig },
      ),
    ).toThrow('Formatter "ios.swiftui.colors" structName must be a valid Swift identifier.');

    expect(() =>
      factory.create(
        {
          name: 'ios.swiftui.colors',
          output: {},
          options: { accessModifier: '' },
        },
        { config: {} as BuildConfig },
      ),
    ).toThrow('Option "accessModifier" for "ios.swiftui.colors" must be a non-empty string.');

    expect(() =>
      factory.create(
        {
          name: 'ios.swiftui.colors',
          output: {},
          options: { imports: ['SwiftUI', 123] as unknown as string[] },
        },
        { config: {} as BuildConfig },
      ),
    ).toThrow(
      'Option "imports" for "ios.swiftui.colors" must be an array of strings. Received ["SwiftUI",123].',
    );
  });
});
