import type { JsonPointer } from '@lapidist/dtif-parser';
import { describe, expect, it } from 'vitest';

import type { BuildConfig } from '../../config/index.js';
import type { BuildTokenSnapshot } from '../../domain/models/tokens.js';
import type { FormatterToken } from '../../formatter/formatter-registry.js';
import { createIosSwiftUiDimensionsFormatterFactory } from './ios-swiftui-dimensions-formatter.js';

function createToken(
  pointer: JsonPointer,
  transforms: ReadonlyMap<string, unknown>,
  value: unknown = undefined,
): FormatterToken {
  const snapshot = {
    pointer,
    token: { type: 'dimension', value },
  } as unknown as BuildTokenSnapshot;
  return {
    snapshot,
    pointer,
    type: 'dimension',
    value,
    transforms,
  } satisfies FormatterToken;
}

describe('createIosSwiftUiDimensionsFormatterFactory', () => {
  it('emits SwiftUI dimension artifacts for supported tokens', async () => {
    const factory = createIosSwiftUiDimensionsFormatterFactory();
    const entry = { name: 'ios.swiftui.dimensions', output: {} } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken('/dimension/spacing/small' as JsonPointer, new Map()),
      createToken(
        '/dimension/spacing/medium' as JsonPointer,
        new Map([
          [
            'dimension.toSwiftUiPoints',
            {
              points: 4,
              literal: '4.0',
            },
          ],
        ]),
      ),
      createToken(
        '/dimension/spacing/large' as JsonPointer,
        new Map([
          [
            'dimension.toSwiftUiPoints',
            {
              points: 12.5,
              literal: '12.5',
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });

    const expectedContents = [
      '// Generated by @dtifx/build. Do not edit.',
      '',
      'import SwiftUI',
      '',
      'public struct DimensionTokens {',
      '  /// Token: /dimension/spacing/large',
      '  /// Points: 12.5',
      '  public static let dimensionSpacingLarge: CGFloat = 12.5',
      '',
      '  /// Token: /dimension/spacing/medium',
      '  /// Points: 4',
      '  public static let dimensionSpacingMedium: CGFloat = 4.0',
      '}',
      '',
    ].join('\n');

    expect(artifacts).toStrictEqual([
      {
        path: 'DimensionTokens.swift',
        contents: expectedContents,
        encoding: 'utf8',
        metadata: { dimensionCount: 2 },
      },
    ]);
  });

  it('ensures identifiers remain unique when collisions occur', async () => {
    const factory = createIosSwiftUiDimensionsFormatterFactory();
    const entry = { name: 'ios.swiftui.dimensions', output: {} } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken(
        '/dimension/Spacing/Small' as JsonPointer,
        new Map([
          [
            'dimension.toSwiftUiPoints',
            {
              points: 8,
              literal: '8.0',
            },
          ],
        ]),
      ),
      createToken(
        '/dimension/spacing/small' as JsonPointer,
        new Map([
          [
            'dimension.toSwiftUiPoints',
            {
              points: 4,
              literal: '4.0',
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });
    const contents = artifacts[0]?.contents ?? '';

    expect(contents).toContain('public static let dimensionSpacingSmall: CGFloat = 4.0');
    expect(contents).toContain('public static let dimensionSpacingSmall2: CGFloat = 8.0');
  });

  it('allows formatter options to customise output', async () => {
    const factory = createIosSwiftUiDimensionsFormatterFactory();
    const entry = {
      name: 'ios.swiftui.dimensions',
      output: {},
      options: {
        filename: 'Sources/Tokens/Spacing.swift',
        structName: 'SpacingTokens',
        accessModifier: 'internal',
        imports: ['SwiftUI', 'CoreGraphics'],
      },
    } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken(
        '/dimension/spacing/base' as JsonPointer,
        new Map([
          [
            'dimension.toSwiftUiPoints',
            {
              points: 10,
              literal: '10.0',
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });

    expect(artifacts).toStrictEqual([
      {
        path: 'Sources/Tokens/Spacing.swift',
        contents: [
          '// Generated by @dtifx/build. Do not edit.',
          '',
          'import SwiftUI',
          'import CoreGraphics',
          '',
          'internal struct SpacingTokens {',
          '  /// Token: /dimension/spacing/base',
          '  /// Points: 10',
          '  internal static let dimensionSpacingBase: CGFloat = 10.0',
          '}',
          '',
        ].join('\n'),
        encoding: 'utf8',
        metadata: { dimensionCount: 1 },
      },
    ]);
  });

  it('returns no artifacts when no supported tokens are provided', async () => {
    const factory = createIosSwiftUiDimensionsFormatterFactory();
    const entry = { name: 'ios.swiftui.dimensions', output: {} } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const artifacts = await definition.run({ tokens: [] });

    expect(artifacts).toStrictEqual([]);
  });
});
