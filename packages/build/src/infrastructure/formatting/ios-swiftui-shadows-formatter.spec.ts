import type { JsonPointer } from '@lapidist/dtif-parser';
import { describe, expect, it } from 'vitest';

import type { BuildConfig } from '../../config/index.js';
import type { BuildTokenSnapshot } from '../../domain/models/tokens.js';
import type { FormatterToken } from '../../formatter/formatter-registry.js';
import { createIosSwiftUiShadowsFormatterFactory } from './ios-swiftui-shadows-formatter.js';

function createToken(
  pointer: JsonPointer,
  transforms: ReadonlyMap<string, unknown>,
  value: unknown = undefined,
): FormatterToken {
  const snapshot = {
    pointer,
    token: { type: 'shadow', value },
  } as unknown as BuildTokenSnapshot;
  return {
    snapshot,
    pointer,
    type: 'shadow',
    value,
    transforms,
  } satisfies FormatterToken;
}

describe('createIosSwiftUiShadowsFormatterFactory', () => {
  it('emits SwiftUI shadow artifacts for supported tokens', async () => {
    const factory = createIosSwiftUiShadowsFormatterFactory();
    const entry = { name: 'ios.swiftui.shadows', output: {} } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken('/shadow/elevated/ignored' as JsonPointer, new Map()),
      createToken(
        '/shadow/elevated/high' as JsonPointer,
        new Map([
          [
            'shadow.toSwiftUI',
            {
              layers: [
                {
                  color: '#000000',
                  x: 0,
                  y: 4,
                  radius: 12,
                  opacity: 0.2,
                },
                {
                  color: '#111111',
                  x: 0,
                  y: 8,
                  radius: 24,
                  spread: 4,
                  opacity: 0.05,
                },
              ],
            },
          ],
        ]),
      ),
      createToken(
        '/shadow/elevated/low' as JsonPointer,
        new Map([
          [
            'shadow.toSwiftUI',
            {
              layers: [
                {
                  color: '#222222',
                  x: 1,
                  y: 1,
                  radius: 2,
                },
              ],
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });

    const expectedContents = [
      '// Generated by @dtifx/build. Do not edit.',
      '',
      'import SwiftUI',
      '',
      'public struct ShadowTokens {',
      '  public struct ShadowLayer {',
      '    public let color: String',
      '    public let x: Double',
      '    public let y: Double',
      '    public let radius: Double',
      '    public let spread: Double?',
      '    public let opacity: Double?',
      '',
      '    public init(',
      '      color: String,',
      '      x: Double,',
      '      y: Double,',
      '      radius: Double,',
      '      spread: Double? = nil,',
      '      opacity: Double? = nil',
      '    ) {',
      '      self.color = color',
      '      self.x = x',
      '      self.y = y',
      '      self.radius = radius',
      '      self.spread = spread',
      '      self.opacity = opacity',
      '    }',
      '  }',
      '',
      '  public struct ShadowToken {',
      '    public let layers: [ShadowLayer]',
      '',
      '    public init(layers: [ShadowLayer]) {',
      '      self.layers = layers',
      '    }',
      '  }',
      '',
      '  /// Token: /shadow/elevated/high',
      '  public static let shadowElevatedHigh = ShadowToken(',
      '    layers: [',
      '      ShadowLayer(',
      '        color: "#000000",',
      '        x: 0,',
      '        y: 4,',
      '        radius: 12,',
      '        opacity: 0.2',
      '      ),',
      '      ShadowLayer(',
      '        color: "#111111",',
      '        x: 0,',
      '        y: 8,',
      '        radius: 24,',
      '        spread: 4,',
      '        opacity: 0.05',
      '      ),',
      '    ]',
      '  )',
      '',
      '  /// Token: /shadow/elevated/low',
      '  public static let shadowElevatedLow = ShadowToken(',
      '    layers: [',
      '      ShadowLayer(color: "#222222", x: 1, y: 1, radius: 2),',
      '    ]',
      '  )',
      '}',
      '',
    ].join('\n');

    expect(artifacts).toStrictEqual([
      {
        path: 'ShadowTokens.swift',
        contents: expectedContents,
        encoding: 'utf8',
        metadata: { shadowCount: 2 },
      },
    ]);
  });

  it('ensures identifiers remain unique when collisions occur', async () => {
    const factory = createIosSwiftUiShadowsFormatterFactory();
    const entry = { name: 'ios.swiftui.shadows', output: {} } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken(
        '/shadow/Elevated/High' as JsonPointer,
        new Map([
          [
            'shadow.toSwiftUI',
            {
              layers: [
                {
                  color: '#000000',
                  x: 0,
                  y: 4,
                  radius: 12,
                },
              ],
            },
          ],
        ]),
      ),
      createToken(
        '/shadow/elevated/high' as JsonPointer,
        new Map([
          [
            'shadow.toSwiftUI',
            {
              layers: [
                {
                  color: '#111111',
                  x: 1,
                  y: 2,
                  radius: 3,
                },
              ],
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });

    expect(artifacts[0]?.contents).toContain('public static let shadowElevatedHigh = ShadowToken(');
    expect(artifacts[0]?.contents).toContain(
      'public static let shadowElevatedHigh2 = ShadowToken(',
    );
  });

  it('allows overriding output file metadata', async () => {
    const factory = createIosSwiftUiShadowsFormatterFactory();
    const entry = {
      name: 'ios.swiftui.shadows',
      output: {},
      options: {
        filename: 'CustomShadows.swift',
        structName: 'CustomShadowTokens',
        accessModifier: 'internal',
        imports: ['SwiftUI', 'Combine'],
      },
    } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken(
        '/shadow/elevated/high' as JsonPointer,
        new Map([
          [
            'shadow.toSwiftUI',
            {
              layers: [
                {
                  color: '#000000',
                  x: 0,
                  y: 4,
                  radius: 8,
                },
              ],
            },
          ],
        ]),
      ),
    ];

    const artifacts = await definition.run({ tokens });

    expect(artifacts).toStrictEqual([
      {
        path: 'CustomShadows.swift',
        contents: expect.stringContaining('internal struct CustomShadowTokens {'),
        encoding: 'utf8',
        metadata: { shadowCount: 1 },
      },
    ]);
    expect(artifacts[0]?.contents).toContain('import SwiftUI');
    expect(artifacts[0]?.contents).toContain('import Combine');
  });

  it('returns no artifacts when no tokens contain supported transforms', async () => {
    const factory = createIosSwiftUiShadowsFormatterFactory();
    const entry = { name: 'ios.swiftui.shadows', output: {} } as const;
    const context = { config: {} as BuildConfig };
    const definition = factory.create(entry, context);

    const tokens: FormatterToken[] = [
      createToken('/shadow/elevated/high' as JsonPointer, new Map()),
    ];

    const artifacts = await definition.run({ tokens });

    expect(artifacts).toStrictEqual([]);
  });

  it('throws when provided invalid option values', () => {
    const factory = createIosSwiftUiShadowsFormatterFactory();

    expect(() =>
      factory.create(
        {
          name: 'ios.swiftui.shadows',
          output: {},
          options: {
            accessModifier: 'private',
          },
        },
        { config: {} as BuildConfig },
      ),
    ).toThrow(
      'Formatter "ios.swiftui.shadows" received invalid access modifier "private". Expected "public" or "internal".',
    );
  });
});
